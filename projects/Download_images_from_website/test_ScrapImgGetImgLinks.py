# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=get_img_links_f42e0954d4
ROOST_METHOD_SIG_HASH=get_img_links_ab9d7dc543

```
Scenario 1: Validate the correct extraction of img links from a well-formed HTML response
Details:
  TestName: test_get_img_links_for_well_formed_html
  Description: This test verifies that the function get_img_links correctly extracts all img links from a well-formed HTML response.
Execution:
  Arrange: Prepare a well-formed HTML response with known img links.
  Act: Call the function get_img_links with the prepared HTML response.
  Assert: Check that the returned list contains all the img links from the prepared HTML response.
Validation:
  Rationalize the importance of the test: This test is important because it verifies the basic functionality of the function get_img_links. The function is expected to correctly extract all img links from a well-formed HTML response.

Scenario 2: Validate the handling of an HTML response with no img links
Details:
  TestName: test_get_img_links_for_html_with_no_img_links
  Description: This test verifies that the function get_img_links correctly handles an HTML response with no img links.
Execution:
  Arrange: Prepare an HTML response with no img links.
  Act: Call the function get_img_links with the prepared HTML response.
  Assert: Check that the returned list is empty.
Validation:
  Rationalize the importance of the test: This test is important because it verifies that the function get_img_links can correctly handle an HTML response with no img links. The function is expected to return an empty list in this case.

Scenario 3: Validate the handling of an empty HTML response
Details:
  TestName: test_get_img_links_for_empty_html
  Description: This test verifies that the function get_img_links correctly handles an empty HTML response.
Execution:
  Arrange: Prepare an empty HTML response.
  Act: Call the function get_img_links with the prepared HTML response.
  Assert: Check that the returned list is empty.
Validation:
  Rationalize the importance of the test: This test is important because it verifies that the function get_img_links can correctly handle an empty HTML response. The function is expected to return an empty list in this case.

Scenario 4: Validate the handling of a malformed HTML response
Details:
  TestName: test_get_img_links_for_malformed_html
  Description: This test verifies that the function get_img_links correctly handles a malformed HTML response.
Execution:
  Arrange: Prepare a malformed HTML response.
  Act: Call the function get_img_links with the prepared HTML response.
  Assert: Check that the function does not raise an error and returns a list (which can be empty).
Validation:
  Rationalize the importance of the test: This test is important because it verifies that the function get_img_links can correctly handle a malformed HTML response. The function is expected not to raise an error and to return a list (which can be empty).
```
"""

# ********RoostGPT********
# 'scrap-img.py' module
from bs4 import BeautifulSoup

def get_img_links(res):
    soup = BeautifulSoup(res, "lxml")
    imglinks = soup.find_all("img", src=True)
    return imglinks

if __name__ == "__main__":
    path = input("Enter Path : ")
    # rest of the code
