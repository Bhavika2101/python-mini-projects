# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=purify_e269c37b02
ROOST_METHOD_SIG_HASH=purify_a906b4f68b

Scenario 1: Validating the function with HTML tags
Details:
  TestName: test_purify_with_html_tags
  Description: This test is intended to verify if the function correctly replaces specified HTML tags with newline characters and removes any other HTML tags.
Execution:
  Arrange: Initialize a string containing HTML tags that are specified in the function and other HTML tags.
  Act: Invoke the purify function with the initialized string as the parameter.
  Assert: Check if the returned string has newline characters in place of the specified HTML tags and no other HTML tags.
Validation:
  This test is important as it verifies the core functionality of the function, which is to replace certain HTML tags with newline characters and remove all other HTML tags. The expected result meets the function's specifications and business requirements.

Scenario 2: Validating the function with no HTML tags
Details:
  TestName: test_purify_with_no_html_tags
  Description: This test is intended to verify if the function correctly handles a string with no HTML tags.
Execution:
  Arrange: Initialize a string with no HTML tags.
  Act: Invoke the purify function with the initialized string as the parameter.
  Assert: Check if the returned string is identical to the input string.
Validation:
  This test is crucial as it checks if the function can handle cases where there are no HTML tags in the input string, which is a valid use case. The expected result aligns with the function's specifications and business requirements.

Scenario 3: Validating the function with empty string
Details:
  TestName: test_purify_with_empty_string
  Description: This test is intended to verify if the function correctly handles an empty string.
Execution:
  Arrange: Initialize an empty string.
  Act: Invoke the purify function with the initialized string as the parameter.
  Assert: Check if the returned string is also an empty string.
Validation:
  This test is important as it verifies if the function can handle edge cases, such as an empty string. The expected result aligns with the function's specifications and business requirements.

Scenario 4: Validating the function with non-string input
Details:
  TestName: test_purify_with_non_string_input
  Description: This test is intended to verify if the function throws an error when the input is not a string.
Execution:
  Arrange: Initialize a non-string input.
  Act: Invoke the purify function with the initialized input as the parameter.
  Assert: Check if the function throws a TypeError.
Validation:
  This test is crucial as it verifies if the function correctly handles invalid inputs, such as non-string parameters. The expected result aligns with the function's specifications and business requirements.
"""

# ********RoostGPT********
import os
import sys
import requests
import re
from bs4 import BeautifulSoup
import pytest
from Scraping_Medium_Articles.scraping_medium import purify

class Test_ScrapingMediumPurify:

    @pytest.mark.regression
    def test_purify_with_html_tags(self):
        test_string = "<br>Hello<br/>World<li>!<div>Test</div>"
        result = purify(test_string)
        assert result == "\nHello\nWorld\n!Test"

    @pytest.mark.regression
    def test_purify_with_no_html_tags(self):
        test_string = "Hello World!"
        result = purify(test_string)
        assert result == "Hello World!"

    @pytest.mark.regression
    def test_purify_with_empty_string(self):
        test_string = ""
        result = purify(test_string)
        assert result == ""

    @pytest.mark.regression
    def test_purify_with_non_string_input(self):
        with pytest.raises(TypeError):
            result = purify(123)
