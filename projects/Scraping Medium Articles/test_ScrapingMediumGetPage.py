# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=get_page_001a34506c
ROOST_METHOD_SIG_HASH=get_page_60a1ba921e

Scenario 1: Valid Medium Article URL
Details:
  TestName: test_get_page_with_valid_medium_url
  Description: This test verifies that the get_page function can successfully fetch and parse the HTML of a Medium article when provided with a valid Medium article URL.
Execution:
  Arrange: Prepare a valid Medium article URL.
  Act: Invoke the get_page function, passing the prepared URL as the input.
  Assert: Check that the returned result is a BeautifulSoup object and that no exceptions were raised during the execution.
Validation:
  Rationalize the importance of the test: The core functionality of the get_page function is to fetch and parse a Medium article. This test ensures that this functionality works with valid inputs.

Scenario 2: Invalid URL
Details:
  TestName: test_get_page_with_invalid_url
  Description: This test verifies that the get_page function correctly handles an invalid URL input by raising an appropriate exception.
Execution:
  Arrange: Prepare an invalid URL that does not match a Medium article URL.
  Act: Invoke the get_page function, passing the prepared URL as the input.
  Assert: Check that the function raises a SystemExit exception.
Validation:
  Rationalize the importance of the test: The get_page function is expected to only work with Medium article URLs. This test ensures that the function correctly handles invalid inputs by raising an appropriate exception.

Scenario 3: Non-Medium URL
Details:
  TestName: test_get_page_with_non_medium_url
  Description: This test verifies that the get_page function correctly handles a valid URL that does not point to a Medium article by raising an appropriate exception.
Execution:
  Arrange: Prepare a valid URL that does not match a Medium article URL.
  Act: Invoke the get_page function, passing the prepared URL as the input.
  Assert: Check that the function raises a SystemExit exception.
Validation:
  Rationalize the importance of the test: The get_page function is expected to only work with Medium article URLs. This test ensures that the function correctly handles valid URLs that do not point to a Medium article by raising an appropriate exception.
"""

# ********RoostGPT********
import os
import sys
import pytest
import requests
import re
from bs4 import BeautifulSoup
from Scraping_Medium_Articles.scraping_medium import get_page

class Test_ScrapingMediumGetPage:
    @pytest.mark.positive
    def test_get_page_with_valid_medium_url(self, monkeypatch):
        # Arrange
        valid_medium_url = "https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369"
        monkeypatch.setattr('builtins.input', lambda _: valid_medium_url)
        
        # Act
        result = get_page()

        # Assert
        assert isinstance(result, BeautifulSoup), "The function did not return a BeautifulSoup object"

    @pytest.mark.negative
    def test_get_page_with_invalid_url(self, monkeypatch):
        # Arrange
        invalid_url = "htttp://this-is-not-a-valid-url"
        monkeypatch.setattr('builtins.input', lambda _: invalid_url)
        
        # Act & Assert
        with pytest.raises(SystemExit) as e:
            get_page()
        assert str(e.value) == "1", "The function did not exit with the correct exit code"

    @pytest.mark.negative
    def test_get_page_with_non_medium_url(self, monkeypatch):
        # Arrange
        non_medium_url = "https://www.google.com"
        monkeypatch.setattr('builtins.input', lambda _: non_medium_url)

        # Act & Assert
        with pytest.raises(SystemExit) as e:
            get_page()
        assert str(e.value) == "1", "The function did not exit with the correct exit code"
