# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=save_file_4ee2c22d44
ROOST_METHOD_SIG_HASH=save_file_43f5757e60

Scenario 1: Successful File Creation and Save
Details:
  TestName: test_successful_file_creation_and_save
  Description: This test is intended to verify that the save_file function successfully creates a new file in the specified directory and writes the given data into it.
Execution:
  Arrange: Prepare the environment by ensuring the './scraped_articles' directory does not exist. Also, prepare a string of data to be written into the file.
  Act: Invoke the save_file function, passing the string of data as a parameter.
  Assert: Check that a new file was created in the './scraped_articles' directory and that the file contains the passed data.
Validation:
  This test is important to ensure that the function is correctly creating and writing to files in the specified directory. The expected result is that the function will create a new file and write the passed data into it.

Scenario 2: Directory Already Exists
Details:
  TestName: test_directory_already_exists
  Description: This test is intended to verify that the save_file function correctly handles the case where the target directory already exists.
Execution:
  Arrange: Prepare the environment by ensuring the './scraped_articles' directory already exists. Also, prepare a string of data to be written into the file.
  Act: Invoke the save_file function, passing the string of data as a parameter.
  Assert: Check that a new file was created in the existing './scraped_articles' directory and that the file contains the passed data.
Validation:
  This test is important to ensure that the function can correctly handle the case where the target directory already exists. The expected result is that the function will create a new file in the existing directory and write the passed data into it.

Scenario 3: Write to an Existing File
Details:
  TestName: test_write_to_existing_file
  Description: This test is intended to verify that the save_file function correctly overwrites an existing file when the filename matches.
Execution:
  Arrange: Prepare the environment by creating a file with the same filename in the './scraped_articles' directory. Also, prepare a new string of data to be written into the file.
  Act: Invoke the save_file function, passing the new string of data as a parameter.
  Assert: Check that the existing file was overwritten with the new data.
Validation:
  This test is crucial in ensuring that the function correctly overwrites an existing file with the same filename. The expected result is that the function will overwrite the existing file with the new data.
"""

# ********RoostGPT********
import os
import pytest
from Scraping_Medium_Articles.scraping_medium import save_file

class Test_ScrapingMediumSaveFile:
    def setup_method(self):
        self.data = "This is a test string."
        self.title = "Test_Title"
        self.folder = './scraped_articles'
        self.filepath = self.folder + '/' + '_'.join(self.title.split()) + '.txt'

    def teardown_method(self):
        if os.path.exists(self.filepath):
            os.remove(self.filepath)
        if os.path.exists(self.folder):
            os.rmdir(self.folder)

    @pytest.mark.positive
    def test_successful_file_creation_and_save(self):
        if os.path.exists(self.folder):
            os.rmdir(self.folder)
        save_file(self.data)
        assert os.path.exists(self.filepath), "File does not exist"
        with open(self.filepath, 'r', encoding='utf8') as infile:
            assert infile.read() == self.data, "Data mismatch in the file"

    @pytest.mark.positive
    def test_directory_already_exists(self):
        if not os.path.exists(self.folder):
            os.mkdir(self.folder)
        save_file(self.data)
        assert os.path.exists(self.filepath), "File does not exist"
        with open(self.filepath, 'r', encoding='utf8') as infile:
            assert infile.read() == self.data, "Data mismatch in the file"

    @pytest.mark.negative
    def test_write_to_existing_file(self):
        if not os.path.exists(self.folder):
            os.mkdir(self.folder)
        with open(self.filepath, 'w', encoding='utf8') as outfile:
            outfile.write("Old data")
        save_file(self.data)
        assert os.path.exists(self.filepath), "File does not exist"
        with open(self.filepath, 'r', encoding='utf8') as infile:
            assert infile.read() == self.data, "Data mismatch in the file"
