# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=win_check_ac802e5959
ROOST_METHOD_SIG_HASH=win_check_e6ea939d9d

Scenario 1: Test for horizontal win
Details:
  TestName: test_horizontal_win
  Description: This test verifies that the win_check function correctly identifies a win when there's a horizontal match.
Execution:
  Arrange: Initialize a board where any one row is filled with the same choice.
  Act: Invoke the win_check function with the board and the choice.
  Assert: The function should return True.
Validation:
  The test confirms the function's capability to accurately determine a horizontal win, which is a key aspect of the game's rules and logic.

Scenario 2: Test for vertical win
Details:
  TestName: test_vertical_win
  Description: This test verifies that the win_check function correctly identifies a win when there's a vertical match.
Execution:
  Arrange: Initialize a board where any one column is filled with the same choice.
  Act: Invoke the win_check function with the board and the choice.
  Assert: The function should return True.
Validation:
  The test validates the function's ability to correctly identify a vertical win, in line with the game's rules and logic.

Scenario 3: Test for diagonal win
Details:
  TestName: test_diagonal_win
  Description: This test verifies that the win_check function correctly identifies a win when there's a diagonal match.
Execution:
  Arrange: Initialize a board where any one diagonal is filled with the same choice.
  Act: Invoke the win_check function with the board and the choice.
  Assert: The function should return True.
Validation:
  The test confirms the function's ability to accurately identify a diagonal win, which is a critical element of the game's rules and logic.

Scenario 4: Test for no win
Details:
  TestName: test_no_win
  Description: This test verifies that the win_check function correctly identifies when there's no win.
Execution:
  Arrange: Initialize a board where no row, column or diagonal is filled with the same choice.
  Act: Invoke the win_check function with the board and the choice.
  Assert: The function should return False.
Validation:
  The test validates the function's ability to correctly identify when no player has won, which is crucial for the game's flow and logic.

Scenario 5: Test for win with empty board
Details:
  TestName: test_win_with_empty_board
  Description: This test verifies that the win_check function correctly identifies there's no win when the board is empty.
Execution:
  Arrange: Initialize an empty board.
  Act: Invoke the win_check function with the board and the choice.
  Assert: The function should return False.
Validation:
  The test confirms the function's ability to handle an empty board, which is an important edge case in the game's logic.
"""

# ********RoostGPT********
import pytest
import os
import importlib.util
import random
import time

module_name = 'tic-tac-toe-AI'
module_path = os.path.join(os.path.dirname(__file__), f'{module_name}.py')
spec = importlib.util.spec_from_file_location(module_name, module_path)
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)


class Test_TicTacToeAiWinCheck:
    
    def test_horizontal_win(self):
        board = [' ', 'X', 'X', 'X', ' ', ' ', ' ', ' ', ' ', ' ']
        choice = 'X'
        assert module.win_check(board, choice) == True

    def test_vertical_win(self):
        board = [' ', 'X', ' ', ' ', 'X', ' ', ' ', 'X', ' ', ' ']
        choice = 'X'
        assert module.win_check(board, choice) == True

    def test_diagonal_win(self):
        board = [' ', 'X', ' ', ' ', ' ', 'X', ' ', ' ', ' ', 'X']
        choice = 'X'
        assert module.win_check(board, choice) == True

    def test_no_win(self):
        board = [' ', 'X', 'O', 'X', 'O', 'X', 'O', 'X', 'O', 'X']
        choice = 'X'
        assert module.win_check(board, choice) == False

    def test_win_with_empty_board(self):
        board = [' ']*10
        choice = 'X'
        assert module.win_check(board, choice) == False
