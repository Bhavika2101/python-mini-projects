# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-scarpImg using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=names_5b9580022e
ROOST_METHOD_SIG_HASH=names_f80181775c

Scenario 1: Validate Player Names are Captured Correctly
Details:
  TestName: test_valid_player_names_captured
  Description: This test is intended to verify that the names input by the players are correctly captured and returned by the function.
Execution:
  Arrange: Mock the input function to return predefined player names.
  Act: Invoke the names() function.
  Assert: Check whether the return value matches the predefined player names.
Validation:
  The test ensures that the function correctly captures and returns the player names. This is crucial for the game's operation as the names are used to identify the players throughout the game.

Scenario 2: Validate Player Names are Capitalized
Details:
  TestName: test_player_names_are_capitalized
  Description: This test is intended to verify that the names input by the players are correctly capitalized by the function.
Execution:
  Arrange: Mock the input function to return predefined player names in lowercase.
  Act: Invoke the names() function.
  Assert: Check whether the return value matches the capitalized version of the predefined player names.
Validation:
  The test ensures that the function correctly capitalizes the player names. This is important for consistency and proper display of player names throughout the game.

Scenario 3: Validate Empty Player Names
Details:
  TestName: test_empty_player_names
  Description: This test is intended to verify the function's behavior when players do not input any name.
Execution:
  Arrange: Mock the input function to return empty strings.
  Act: Invoke the names() function.
  Assert: Check whether the return value matches the empty strings.
Validation:
  The test ensures that the function handles empty player names correctly. This is important as it would be a valid scenario where a player does not input any name, and the game should still be able to handle this.

Scenario 4: Validate Non-alphabetic Player Names
Details:
  TestName: test_non_alphabetic_player_names
  Description: This test is intended to verify the function's behavior when players input names that contain non-alphabetic characters.
Execution:
  Arrange: Mock the input function to return strings containing non-alphabetic characters.
  Act: Invoke the names() function.
  Assert: Check whether the return value matches the input strings, indicating that the function does not alter non-alphabetic characters.
Validation:
  The test ensures that the function handles non-alphabetic characters correctly. This is important as players might input names that contain such characters, and the game should still be able to handle this.
"""

# ********RoostGPT********
import pytest
import mock
import os
import importlib.util

module_name = 'tic_tac_toe_AI'
module_path = os.path.join(os.path.dirname(__file__), f'{module_name}.py')
spec = importlib.util.spec_from_file_location(module_name, module_path)
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)


@pytest.mark.regression
class Test_TicTacToeAiNames:

    @pytest.mark.positive
    def test_valid_player_names_captured(self):
        with mock.patch('builtins.input', side_effect=['Alice', 'Bob']):
            p1_name, p2_name = module.names()
            assert p1_name == 'Alice'
            assert p2_name == 'Bob'

    @pytest.mark.positive
    def test_player_names_are_capitalized(self):
        with mock.patch('builtins.input', side_effect=['alice', 'bob']):
            p1_name, p2_name = module.names()
            assert p1_name == 'Alice'
            assert p2_name == 'Bob'

    @pytest.mark.negative
    def test_empty_player_names(self):
        with mock.patch('builtins.input', side_effect=['', '']):
            p1_name, p2_name = module.names()
            assert p1_name == ''
            assert p2_name == ''

    @pytest.mark.negative
    def test_non_alphabetic_player_names(self):
        with mock.patch('builtins.input', side_effect=['@lice123', 'B0b_456']):
            p1_name, p2_name = module.names()
            assert p1_name == '@lice123'
            assert p2_name == 'B0b_456'
